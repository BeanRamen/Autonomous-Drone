#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from rclpy.qos import QoSProfile, ReliabilityPolicy, HistoryPolicy, DurabilityPolicy
from sensor_msgs.msg import LaserScan
from px4_msgs.msg import TrajectorySetpoint

class ObstacleAvoidance(Node):
    def __init__(self):
        super().__init__('obstacle_avoidance')

        # QoS Profile pentru subscriber si publisher
        qos_profile = QoSProfile(
            reliability=ReliabilityPolicy.BEST_EFFORT,
            durability=DurabilityPolicy.VOLATILE,
            history=HistoryPolicy.KEEP_LAST,
            depth=1
        )

        # Subscriber pentru datele de la LiDAR
        self.create_subscription(
            LaserScan, '/gazebo_ros_head_rplidar_controller/out', self.lidar_callback, qos_profile)

        # Publisher pentru setpoint-ul de pozitie
        self.trajectory_setpoint_publisher = self.create_publisher(
            TrajectorySetpoint, '/fmu/in/trajectory_setpoint', qos_profile)

        # Praguri pentru detectia obstacolelor
        self.obstacle_distance_threshold = 3.0  # Distanta minima pentru a detecta obstacolul
        self.default_altitude = -2.0  # Altitudinea dronei
        self.get_logger().info("Obstacle Avoidance node initialized.")

    def lidar_callback(self, msg):
        """Callback pentru datele de la LiDAR"""
        valid_ranges = [(i, r) for i, r in enumerate(msg.ranges) if r > 0.2]
        if not valid_ranges:
            self.get_logger().info("Nu exista masuratori valide.")
            return

        # Detectam cea mai apropiata masuratoare
        min_index, min_distance = min(valid_ranges, key=lambda x: x[1])
        angle = msg.angle_min + min_index * msg.angle_increment

        if min_distance < self.obstacle_distance_threshold:
            # Determinam directia obstacolului
            if -0.5 < angle < 0.5:
                direction = "in fata"
            elif angle >= 0.5:
                direction = "in dreapta"
            elif angle <= -0.5:
                direction = "in stanga"
            else:
                direction = "necunoscuta"

            self.get_logger().info(f"Obstacol detectat {direction} la distanta {min_distance:.2f}m")
            self.avoid_obstacle(direction)
        else:
            self.get_logger().info("Zona sigura, niciun obstacol.")

    def avoid_obstacle(self, direction):
        """Functie pentru evitarea obstacolului"""
        # Pozitia curenta este ajustata pentru a evita obstacolul
        setpoint = TrajectorySetpoint()

        if direction == "in fata":
            setpoint.position = [-2.0, 0.0, self.default_altitude]  # Deplasare inapoi
        elif direction == "in dreapta":
            setpoint.position = [0.0, -2.0, self.default_altitude]  # Deplasare la stanga
        elif direction == "in stanga":
            setpoint.position = [0.0, 2.0, self.default_altitude]  # Deplasare la dreapta
        else:
            setpoint.position = [-2.0, 0.0, self.default_altitude]  # Default: inapoi

        setpoint.timestamp = int(self.get_clock().now().nanoseconds / 1000)
        self.trajectory_setpoint_publisher.publish(setpoint)

        self.get_logger().info(f"Drona se muta pentru a evita obstacolul in directia opusa: {setpoint.position}")

def main(args=None):
    rclpy.init(args=args)
    node = ObstacleAvoidance()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
